#!/bin/bash

source ./.env.sh || exit 42

N_TESTS="20"

_smart_curl() {
  IP=$1
  PORT=$2
  PRE_COMMENT="$3" # must be short and hopefuly static in length
  POST_COMMENT="$4"
  POST_ENDPOINT="${5:-}"
  HOST_HEADER="${6:-}"
  #https://stackoverflow.com/questions/6136022/script-to-get-the-http-status-code-of-a-list-of-urls
  curl -s -H "$HOST_HEADER" -o /dev/null --silent --head --write-out "HTTP_RESPONSE: $PRE_COMMENT %{http_code} for http://$IP:$PORT/$POST_ENDPOINT\t'$POST_COMMENT'\n" "http://$IP:$PORT/$POST_ENDPOINT" |
    bin/rcg 200 "BOLD . GREEN" | bin/rcg 500 "BOLD . RED"  | bin/rcg 503 "BOLD . RED" | bin/rcg 000 "YELLOW"  | bin/rcg 404 "RED"
    # If colleagues complain i can simply hardcode sed as per
}

echo Getting status of my 8 apps them all WOW:
#bin/kubectl-triune get service | grep app0 | grep -v none

# [DEV ] app01-kupython   LoadBalancer   10.60.0.203   35.195.165.153   8080:32206/TCP   15m
# [DEV ] app02-kuruby     LoadBalancer   10.60.0.86    35.241.210.233   80:31610/TCP     33h
# [STAG] app01-kupython   LoadBalancer   10.60.2.84    35.233.39.5      8080:30066/TCP   15m
# [STAG] app02-kuruby     LoadBalancer   10.60.3.225   35.241.130.230   80:31687/TCP     33h
# [CANA] app01-kupython   LoadBalancer   10.72.3.91    35.187.169.43   8080:30438/TCP   26h
# [PROD] app01-kupython   LoadBalancer   10.21.3.127   34.78.28.253    8080:30607/TCP   26h
# [PROD] app02-kuruby     LoadBalancer   10.21.2.28    34.79.203.238   80:30262/TCP     33h

#_smart_curl 35.195.165.153 8080 "[DEV ] app01-kupython"
#_smart_curl 35.241.210.233 80   "[DEV ] app02-kuruby"

white  "== app01: python web app (latest version: '$(cat apps/app01/VERSION)')=="
bin/kubectl-triune get service | grep app01 | grep -v none | while read stage app LB PVTIP PUBLIC_IP BLURB TIME ; do
  _smart_curl $PUBLIC_IP 8080 "$stage"
done

white  "== app02: ruby web app (latest version: '$(cat apps/app02/VERSION)')=="
bin/kubectl-triune get service | grep app02 | grep -v none | while read stage app LB PVTIP PUBLIC_IP BLURB TIME ; do
  _smart_curl $PUBLIC_IP 8080 "$stage"
done

echo  "== Solution0 (Internal LB) =="
echo 'ðŸ˜ž Sorry, no routable endpoints. However let me find the Private IP for you. TODO: Try troubleshoot sol0 script.'

white  "== Solution1 Artifacts (nearly there) =="
# Note they dont get public IPs. But with Daniel it took them 1d to do it so i will wait till tomorrow.
#bin/kubectl-canary get gateways | egrep "sol1sc-app"
# This might be pleonastic but hey, ANYTHING for a public IP!
#bin/kubectl-prod get gateways | egrep "sol1sc-app"
# #CanProd2Dev4debug
bin/kubectl-dev     get gateways | egrep "sol1sc-app"
bin/kubectl-staging get gateways | egrep "sol1sc-app"

# #CanProd2Dev4debug
# for APPXX_ITER in app01 app02 ; do
#   GW_RULE="sol1d-$APPXX_ITER-${DEFAULT_SHORT_REGION}-ext-gw"
#   white "Solution1: $APPXX_ITER GW_RULE='$GW_RULE'"
#   #IP_FWDRULE=$(gcloud compute forwarding-rules list --filter "$FWD_RULE" 2>/dev/null | tail -1 | awk '{print $2}' )
#   bin/kubectl-dev get gateways | egrep "sol1D_OLD" | grep True | while read ENV GATEWAY_NAME class IP_GATEWAY ALWAYSTRUE TIME_UP ; do
#      _smart_curl "$IP_GATEWAY" 80 "$APPXX_ITER" "[$ENV] GW_RULE $GW_RULE"
#      _echodo curl -s -H "host: passepartout.example.io" "http://$IP_GATEWAY:8080/statusz"
#   done
# done

#DEFAULT_SHORT_REGION = eu-w1


# Solution1 - DEV cluster (STAG has same IPs so its redundant)
for APPXX_ITER in app01 app02 ; do
  GW_RULE="sol1sc-$APPXX_ITER-${DEFAULT_SHORT_REGION}-ext-gw"
  white "Solution1: $APPXX_ITER GW_RULE='$GW_RULE'"
  #IP_FWDRULE=$(gcloud compute forwarding-rules list --filter "$FWD_RULE" 2>/dev/null | tail -1 | awk '{print $2}' )
  VANILLA=TRUE bin/kubectl-dev get gateways 2>/dev/null | egrep "sol1sc" | grep True | while read GATEWAY_NAME class IP_GATEWAY ALWAYSTRUE TIME_UP ; do
     _smart_curl "$IP_GATEWAY" 80 "$APPXX_ITER" "[$ENV] GW_RULE $GW_RULE" statusz 'host: www.example.io'
     #_echodo
     curl -s -H "host: www.example.io" "http://$IP_GATEWAY:80/statusz"
  done
done

green  "== Solution2 Artifacts (works) =="

for APPXX_ITER in app01 app02 ; do
  FWD_RULE="$APPXX_ITER-${FWD_RULE_MTSUFFIX}"
  #white "Solution2: $APPXX_ITER FWD_RULE='$FWD_RULE'"
  IP_FWDRULE=$(gcloud compute forwarding-rules list --filter "$FWD_RULE" 2>/dev/null | tail -1 | awk '{print $2}' )
  if [ -z "$IP_FWDRULE" ] ; then
    red "NOT FOUND IP for FWD_RULE '$FWD_RULE' for $APPXX_ITER. Skipping."
  else
    _smart_curl "$IP_FWDRULE" 80 "$APPXX_ITER" "FwdRule $FWD_RULE"
    # now if it works...
    #bin/solution2-simple-curl "$APPXX_ITER"


    for i in $(seq 1 "$N_TESTS" ); do
      ret=$(curl -s -H 'host: www.example.io' http://$IP_FWDRULE/statusz)
      echo "$ret"
    done | sort | uniq -c

  fi
done

./troubleshoot-solution4

echo "END of $0"
